// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  fullName  String?
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  passwordIsChanged Boolean @default(false)
  avatarFileId String?
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDinawinEmployee Boolean?
  
  // Relations
  aspNetUser AspNetUser?
  workSpaceUsers WorkSpaceUser[]
  createdWorkSpaces WorkSpace[] @relation("WorkSpaceCreator")
  createdProjects Project[] @relation("ProjectCreator")
  createdTasks Task[] @relation("TaskCreator")
  assignedTasks Task[] @relation("TaskAssignments")
  userTasks   UserTask[]
  comments   Comment[]
  problemUsers ProblemUser[]
  relatedPeopleAsUser RelatedPerson[] @relation("RelatedPersonUser")
  relatedPeopleAsRelatedUser RelatedPerson[] @relation("RelatedPersonRelatedUser")
  userSecurityToken UserSecurityToken?
  appSettings AppSetting[]
  notifications Notification[]
  firebaseTokens FirebaseToken[]
  userProjects UserProject[]
  taskProgresses TaskProgress[]
  commentReactions CommentReaction[]
  avatarFile FileData? @relation("UserAvatar", fields: [avatarFileId], references: [id])
  
  @@map("Users")
}

model AspNetUser {
  id                String   @id @default(cuid())
  userName          String   @unique
  normalizedUserName String  @unique
  email             String?
  normalizedEmail   String?
  emailConfirmed    Boolean  @default(false)
  passwordHash      String?
  securityStamp     String?
  concurrencyStamp  String?
  phoneNumber       String?
  phoneNumberConfirmed Boolean @default(false)
  twoFactorEnabled  Boolean  @default(false)
  lockoutEnd        DateTime?
  lockoutEnabled    Boolean  @default(true)
  accessFailedCount Int      @default(0)
  refreshToken     String?
  refreshTokenExpiry DateTime @default("0001-01-01T00:00:00Z")
  oldId            String?
  
  // Relations
  user User @relation(fields: [id], references: [id], onDelete: Cascade)
  aspNetUserClaims AspNetUserClaim[]
  aspNetUserLogins AspNetUserLogin[]
  aspNetUserRoles AspNetUserRole[]
  aspNetUserTokens AspNetUserToken[]
  
  @@map("AspNetUsers")
}

model WorkSpace {
  id          String   @id @default(cuid())
  workSpaceTitle String @unique
  description String?
  isActive    Boolean  @default(true)
  inActiveDescription String?
  createdAt   DateTime @default(now())
  createdById   String?
  fileDataId  String?
  currentContractId String? @unique
  workSpaceCode Int     @unique
  hasVoip     Boolean?
  
  // Relations
  createdBy  User?           @relation("WorkSpaceCreator", fields: [createdById], references: [id], onDelete: Cascade)
  workSpaceUsers WorkSpaceUser[]
  projects    Project[]
  tasks       Task[]
  problems    Problem[]
  relatedPeople RelatedPerson[]
  contract    Contract?       @relation("ContractWorkSpace")
  fileData    FileData?       @relation("WorkSpaceFileData", fields: [fileDataId], references: [id])
  workSpaceInvitedUsers WorkSpaceInvitedUser[]
  
  @@map("WorkSpaces")
}

model WorkSpaceUser {
  id              String   @id @default(cuid())
  workSpaceId     String
  userId          String
  created         DateTime @default(now())
  createdBy       String?
  isUserAccepted  Boolean  @default(false)
  isActive        Boolean  @default(false)
  hasCheckedWorkSpace Boolean?
  isWorkSpaceAdmin Boolean  @default(false)
  isWorkSpaceOwner Boolean  @default(false)
  userAlias       String?
  avatarFileId    String?
  order           Int?
  totalOrder      Int?
  
  // Relations
  workSpace WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatarFile FileData? @relation("WorkSpaceUserAvatar", fields: [avatarFileId], references: [id])
  
  @@unique([workSpaceId, userId])
  @@map("WorkSpaceUsers")
}

model Project {
  id          String   @id @default(cuid())
  workSpaceId String
  name        String
  description String?
  attachment  String?
  createdById   String?
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(false)
  startDate   DateTime?
  endDate     DateTime?
  
  // Relations
  workSpace WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  createdBy User?      @relation("ProjectCreator", fields: [createdById], references: [id], onDelete: Cascade)
  userProjects UserProject[]
  taskProjects TaskProject[]
  
  @@map("Projects")
}

model UserProject {
  id               String   @id @default(cuid())
  projectId        String
  userId           String
  created          DateTime @default(now())
  createdBy        String?
  order            Int      @default(0)
  isFavorite       Boolean  @default(false)
  isFavouriteUserId String?
  isProjectManager Boolean?
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("UserProjects")
}

model Task {
  id                   String   @id @default(cuid())
  workSpaceId          String
  description          String
  startDateTime        DateTime?
  endDateTime          DateTime?
  timeEstimateDay      Int?
  timeEstimateHour     Int?
  timeEstimateMinute   Int?
  priority             Int?
  importanceType       Int?
  dragLocked           Boolean  @default(false)
  status               Int      @default(0)
  reminderSettingsJson String?
  isCreatedByAI        Boolean  @default(false)
  isDeleted            Boolean  @default(false)
  createdById          String?
  assignedToId         String?
  createdAt            DateTime @default(now())
  lastEditedById       String?
  lastEditedDate       DateTime?
  
  // Relations
  workSpace     WorkSpace        @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  createdBy     User?            @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  assignedTo    User?            @relation("TaskAssignments", fields: [assignedToId], references: [id])
  taskProjects  TaskProject[]
  userTasks     UserTask[]
  comments      Comment[]
  taskImages    TaskImage[]
  taskProgresses TaskProgress[]
  taskRequirements TaskRequirement[]
  taskUnits     TaskUnit[]
  taskVoipData  TaskVoipData?
  notifications Notification[]
  voipTasks     VoipTask[]
  
  @@map("Tasks")
}

model TaskProject {
  id        String   @id @default(cuid())
  taskId    String
  projectId String
  createdBy String?
  createdAt DateTime @default(now())
  order     Int?
  
  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, taskId])
  @@map("TaskProjects")
}

model UserTask {
  id                   String   @id @default(cuid())
  tasksId              String
  usersId              String
  viewOrder            Int      @default(0)
  timelineViewOrder    Int      @default(0)
  taskStatus           Int      @default(0)
  createdDate          DateTime @default(now())
  seenDate             DateTime?
  inProgressDate       DateTime?
  doneDate             DateTime?
  completeDate         DateTime?
  todayStartDate       DateTime?
  todayEndDate         DateTime?
  rejectedDate         DateTime?
  lastStatusUpdateUserId String?
  startDateTime        DateTime?
  seenByUser           Boolean  @default(false)
  doneWithDelay        Boolean  @default(false)
  rejectedCount        Int      @default(0)
  
  // Relations
  task Task @relation(fields: [tasksId], references: [id], onDelete: Cascade)
  user User @relation(fields: [usersId], references: [id], onDelete: Cascade)
  
  @@unique([tasksId, usersId])
  @@map("UserTasks")
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String?
  body      String
  commentId String?
  userId    String
  createdBy String?
  createdAt DateTime @default(now())
  isEdited  Boolean?
  problemId String?
  
  // Relations
  task    Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem?  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  parentComment Comment? @relation("CommentParent", fields: [commentId], references: [id])
  comments Comment[] @relation("CommentParent")
  commentFiles CommentFile[]
  commentReactions CommentReaction[]
  
  @@map("Comments")
}

model CommentFile {
  id        String   @id @default(cuid())
  commentId String
  fileType  Int
  fileDataId String
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  comment  Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  fileData FileData @relation(fields: [fileDataId], references: [id], onDelete: Cascade)
  
  @@map("CommentFiles")
}

model CommentReaction {
  id        String   @id @default(cuid())
  seenDate  DateTime @default(now())
  userId    String
  commentId String
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@map("CommentReactions")
}

model TaskImage {
  id        String   @id @default(cuid())
  taskId    String
  fileType  Int
  imageId   String
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fileData FileData @relation("TaskImageFileData", fields: [imageId], references: [id], onDelete: Cascade)
  
  @@map("TaskImages")
}

model TaskProgress {
  id          String   @id @default(cuid())
  progress    Int
  description String?
  userRole    Int
  endTime     DateTime
  userId      String
  taskId      String
  createdBy   String?
  createdAt   DateTime @default(now())
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("TaskProgresses")
}

model TaskRequirement {
  id        String   @id @default(cuid())
  order     Int
  body      String
  isDone    Boolean  @default(false)
  taskId    String
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("TaskRequirements")
}

model Unit {
  id        String   @id @default(cuid())
  name      String
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  taskUnits TaskUnit[]
  
  @@map("Units")
}

model TaskUnit {
  tasksId String
  unitsId String
  
  // Relations
  task Task @relation(fields: [tasksId], references: [id], onDelete: Cascade)
  unit Unit @relation(fields: [unitsId], references: [id], onDelete: Cascade)
  
  @@id([tasksId, unitsId])
  @@map("TaskUnits")
}

model TaskVoipData {
  id               String   @id @default(cuid())
  voipAudioFileText String?
  
  // Relations
  task Task @relation(fields: [id], references: [id], onDelete: Cascade)
  
  @@map("TaskVoipData")
}

model Notification {
  id                   String   @id @default(cuid())
  entityId             String
  userId               String
  sendingNotifDateTime DateTime @default(now())
  notificationType     Int
  notificationTitle    String?
  imageUrl             String?
  notificationBody     String?
  notificationStateId  Int      @default(0)
  createdBy            String?
  createdAt            DateTime @default(now())
  workSpaceId          String?
  reminderDate         DateTime?
  reminderTime         DateTime?
  repeat               Boolean  @default(false)
  earlyReminderValue  Int?
  earlyReminderTime   Int?
  reminderRepeatValue Int?
  reminderRepeatTime  Int?
  
  // Relations
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationResults NotificationResult[]
  task             Task?              @relation(fields: [entityId], references: [id], onDelete: Cascade)
  notificationState NotificationState? @relation(fields: [notificationStateId], references: [id])
  
  @@map("Notifications")
}

model NotificationResult {
  id                 String   @id @default(cuid())
  systemNotificationId String
  firebaseTokenId    String
  success            Boolean
  sendErrorMessage   String?
  createdBy          String?
  createdAt          DateTime @default(now())
  
  // Relations
  notification Notification @relation(fields: [systemNotificationId], references: [id], onDelete: Cascade)
  firebaseToken FirebaseToken @relation(fields: [firebaseTokenId], references: [id], onDelete: Cascade)
  
  @@map("NotificationResults")
}

model FirebaseToken {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String   @unique
  token       String
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedDate DateTime?
  
  // Relations
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationResults  NotificationResult[]
  
  @@map("FirebaseTokens")
}

model Problem {
  id          String   @id @default(cuid())
  workSpaceId String
  problemType Int      @default(0)
  description String
  createdBy   String?
  createdAt   DateTime @default(now())
  
  // Relations
  workSpace   WorkSpace    @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  comments    Comment[]
  problemUsers ProblemUser[]
  problemFiles ProblemFile[]
  
  @@map("Problems")
}

model ProblemUser {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  @@map("ProblemUsers")
}

model ProblemFile {
  id        String   @id @default(cuid())
  problemId String
  fileType  Int
  fileDataId String
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  fileData FileData @relation(fields: [fileDataId], references: [id], onDelete: Cascade)
  
  @@map("ProblemFiles")
}

model RelatedPerson {
  id            String   @id @default(cuid())
  userId        String
  relatedUserId String
  createdBy     String?
  createdAt     DateTime @default(now())
  relationType  Int      @default(0)
  isFavourite   Boolean?
  order         Int?
  workSpaceId   String
  
  // Relations
  user         User         @relation("RelatedPersonUser", fields: [userId], references: [id], onDelete: Cascade)
  relatedUser  User         @relation("RelatedPersonRelatedUser", fields: [relatedUserId], references: [id], onDelete: Cascade)
  workSpace    WorkSpace    @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, relatedUserId, workSpaceId, relationType])
  @@map("RelatedPeople")
}

model FileData {
  id          String   @id @default(cuid())
  fileKey     String   @unique @default(uuid())
  workSpaceId String?  @default("9")
  fileSource  Int      @default(0)
  fileName    String
  fileExtension String?
  mimeType    String
  fileSize    BigInt
  createdBy   String?
  createdAt   DateTime @default(now())
  folder      String?
  isTemporaryUntil DateTime?
  
  // Relations
  taskImages     TaskImage[]      @relation("TaskImageFileData")
  commentFiles   CommentFile[]
  problemFiles   ProblemFile[]
  usersAsAvatar  User[]           @relation("UserAvatar")
  workSpaces     WorkSpace[]       @relation("WorkSpaceFileData")
  workSpaceUsers WorkSpaceUser[]  @relation("WorkSpaceUserAvatar")
  fileExtensions FileExtension?    @relation(fields: [fileExtension], references: [extension])
  
  @@map("FileDatas")
}

model UserSecurityToken {
  id                   String   @id @default(cuid())
  userId               String   @unique
  securityVersion      Int
  lastPasswordChangeAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("UserSecurityTokens")
}

model AppSetting {
  id          String   @id @default(cuid())
  userId      String?
  settingKey  String?
  settingValue String?
  createdBy   String?
  createdAt   DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("AppSettings")
}

// Missing models from SQL Server schema
model Contract {
  id                       String   @id @default(cuid())
  shoppingCartId           String?
  contractNumber           Int      @unique
  title                    String
  activeState              Int      @default(0)
  contractStartDate        DateTime @default(now())
  contractEndDate          DateTime @default(now())
  basePrice                Float
  additionalPrice          Float    @default(0)
  discountPrice            Float    @default(0)
  finalPrice               Float
  numberOfUsers            Int
  workSpaceCount           Int      @default(1)
  discVolume               Int
  duration                 Int
  licenseDuration          Int
  transformedFromContractId String?
  originalContractId       String?
  createdAt                DateTime @default(now())
  createdById              String?
  hasDedicatedServer       Boolean  @default(false)
  accessToSendSms          Boolean  @default(true)
  accessToFileManagerBackUp Boolean  @default(true)
  accessToFileManager      Boolean  @default(true)
  accessToReorderTasks     Boolean  @default(true)
  accessToEstimate         Boolean  @default(true)
  accessToStartEndTask     Boolean  @default(true)
  accessToReminder         Boolean  @default(true)
  accessToPriority         Boolean  @default(true)
  accessToImportance       Boolean  @default(true)
  accessToNotification     Boolean  @default(true)
  accessToAi               Boolean  @default(true)
  accessToContacts         Boolean  @default(true)
  accessToProblems         Boolean  @default(true)
  accessToTimeline         Boolean  @default(true)
  accessToReports          Boolean  @default(true)
  accessToUploadFileInComment Boolean @default(true)
  
  // Relations
  shoppingCart ShoppingCart? @relation(fields: [shoppingCartId], references: [id])
  workSpace   WorkSpace?   @relation("ContractWorkSpace", fields: [id], references: [currentContractId])
  usedDiscounts Discount[] @relation("DiscountUsedContract")
  createdDiscounts Discount[] @relation("DiscountCreateContract")
  
  @@map("Contracts")
}

model License {
  id                       String   @id @default(cuid())
  title                    String
  numberOfUsers            Int
  workSpaceCount           Int      @default(1)
  discVolume               Int
  price                    Float
  isActive                 Boolean  @default(true)
  viewOrder                Int
  createdById              String?
  createdAt                DateTime @default(now())
  duration                 Int
  licenseDuration          Int
  accessToSendSms          Boolean  @default(true)
  accessToFileManagerBackUp Boolean  @default(true)
  accessToFileManager      Boolean  @default(true)
  accessToReorderTasks     Boolean  @default(true)
  accessToEstimate         Boolean  @default(true)
  accessToStartEndTask     Boolean  @default(true)
  accessToReminder         Boolean  @default(true)
  accessToPriority         Boolean  @default(true)
  accessToImportance       Boolean  @default(true)
  accessToNotification     Boolean  @default(true)
  accessToAi               Boolean  @default(true)
  accessToContacts         Boolean  @default(true)
  accessToProblems         Boolean  @default(true)
  accessToTimeline         Boolean  @default(true)
  accessToReports          Boolean  @default(true)
  accessToUploadFileInComment Boolean @default(true)
  
  @@map("Licenses")
}

model LicenseSetting {
  id        String   @id @default(cuid())
  userPrice Float
  memoryPrice Float
  createdById String?
  createdAt DateTime @default(now())
  
  @@map("LicenseSettings")
}

model ShoppingCart {
  id                     String   @id @default(cuid())
  trackingNumber         BigInt   @unique
  authority              String?
  title                  String
  isWebApp               Boolean  @default(false)
  paymentSuccess         Boolean?
  paymentDateTime        DateTime?
  paymentRefId           BigInt?
  paymentCode            Int?
  activeState            Int
  basePrice              Float
  additionalPrice        Float?
  discountPrice          Float?
  finalPrice             Float
  numberOfUsers          Int
  discVolume             Int
  licenseDuration        Int
  duration               Int
  transformedFromContractId String?
  originalContractId     String?
  createdAt              DateTime @default(now())
  createdById            String?
  hasDedicatedServer     Boolean  @default(false)
  licenseId              String?
  
  // Relations
  contracts Contract[]
  
  @@map("ShoppingCarts")
}

model Discount {
  id                 String   @id @default(cuid())
  discountCode       String   @unique
  usedWithContractId String?
  createByContractId String?
  isPercent          Boolean  @default(false)
  discountValue      Int
  discountStatus     Int      @default(0)
  createdAt          DateTime @default(now())
  createdById        String?
  
  // Relations
  usedWithContract   Contract?   @relation("DiscountUsedContract", fields: [usedWithContractId], references: [id])
  createByContract   Contract?   @relation("DiscountCreateContract", fields: [createByContractId], references: [id])
  
  @@map("Discounts")
}

model NotificationState {
  id    Int     @id
  title String
  
  // Relations
  notifications Notification[]
  
  @@map("NotificationStates")
}

model AspNetRole {
  id               String   @id @default(cuid())
  name             String?  @unique
  normalizedName   String?  @unique
  concurrencyStamp String?
  customerId       String?
  workSpaceId      String?
  
  // Relations
  aspNetRoleClaims AspNetRoleClaim[]
  aspNetUserRoles  AspNetUserRole[]
  
  @@map("AspNetRoles")
}

model AspNetRoleClaim {
  id         String   @id @default(cuid())
  roleId     String
  claimType  String?
  claimValue String?
  
  // Relations
  role AspNetRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@map("AspNetRoleClaims")
}

model AspNetUserClaim {
  id         String   @id @default(cuid())
  userId     String
  claimType  String?
  claimValue String?
  
  // Relations
  user AspNetUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("AspNetUserClaims")
}

model AspNetUserLogin {
  loginProvider    String
  providerKey      String
  providerDisplayName String?
  userId           String
  
  // Relations
  user AspNetUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([loginProvider, providerKey])
  @@map("AspNetUserLogins")
}

model AspNetUserRole {
  userId String
  roleId String
  
  // Relations
  user AspNetUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  role AspNetRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@id([userId, roleId])
  @@map("AspNetUserRoles")
}

model AspNetUserToken {
  userId        String
  loginProvider String
  name          String
  value         String?
  
  // Relations
  user AspNetUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([userId, loginProvider, name])
  @@map("AspNetUserTokens")
}

model FileExtension {
  extension String @id
  fileType  Int      @default(1)
  
  // Relations
  fileDatas FileData[]
  
  @@map("FileExtensions")
}

model GlobalSetting {
  id        String   @id @default(uuid())
  title     String
  isEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  createdById String?
  
  @@map("GlobalSettings")
}

model Name {
  id          String   @id @default(cuid())
  inputString String
  
  suggestions Suggestion[]
  
  @@map("Names")
}

model Payment {
  id            String   @id @default(cuid())
  price         Float
  trackingNumber BigInt?
  createdById   String?
  createdAt     DateTime @default(now())
  
  @@map("Payments")
}

model Suggestion {
  id          String   @id @default(cuid())
  nameId      String
  nameSuggestion String
  deviceId    String?
  
  // Relations
  name Name @relation(fields: [nameId], references: [id], onDelete: Cascade)
  
  @@map("Suggestions")
}

model SmsMessage {
  id             String   @id @default(cuid())
  receptorNumber String
  messageText    String
  sentDateTime   DateTime @default(now())
  createdById    String?
  createdAt      DateTime @default(now())
  
  @@map("SmsMessages")
}

model VoipFile {
  id                  String   @id @default(cuid())
  fileAddress         String
  fileInfo            String
  isChecked           Boolean  @default(false)
  voipCallResult      Int      @default(0)
  destinationUserId   Int?
  destinationUserData String?
  duration            Int      @default(0)
  sourceUserId        Int?
  sourceUserData      String?
  voipExtension       String?
  createdAt           DateTime @default(now())
  createdById         String?
  
  // Relations
  voipTasks VoipTask[]
  
  @@map("Z___VoipFiles")
}

model VoipTask {
  id          String   @id @default(cuid())
  voipFileId  String
  taskId      String
  createdById String?
  createdAt   DateTime @default("2024-09-30T13:11:06.2201348+03:30")
  
  // Relations
  voipFile VoipFile @relation(fields: [voipFileId], references: [id], onDelete: Cascade)
  task     Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, voipFileId])
  @@map("Z___VoipTasks")
}

model WorkSpaceInvitedUser {
  id          String   @id @default(cuid())
  name        String?
  workSpaceId String
  phoneNumber String
  createdAt   DateTime @default(now())
  createdById String
  
  // Relations
  workSpace WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  
  @@unique([phoneNumber, workSpaceId])
  @@map("WorkSpaceInvitedUsers")
}