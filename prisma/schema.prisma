// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  aspNetUser AspNetUser?
  posts      Post[]
  workSpaceUsers WorkSpaceUser[]
  createdWorkSpaces WorkSpace[]
  createdProjects Project[]
  userProjects UserProject[]
  createdTasks Task[]
  assignedTasks Task[] @relation("TaskAssignments")
  userTasks   UserTask[]
  comments   Comment[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model AspNetUser {
  id                String   @id @default(cuid())
  userName          String   @unique
  normalizedUserName String  @unique
  email             String?
  normalizedEmail   String?
  emailConfirmed    Boolean  @default(false)
  passwordHash      String?
  securityStamp     String?
  concurrencyStamp  String?
  phoneNumber       String?
  phoneNumberConfirmed Boolean @default(false)
  twoFactorEnabled  Boolean  @default(false)
  lockoutEnd        DateTime?
  lockoutEnabled    Boolean  @default(true)
  accessFailedCount Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model WorkSpace {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  createdBy  User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  workSpaceUsers WorkSpaceUser[]
  projects    Project[]
}

model WorkSpaceUser {
  id              String   @id @default(cuid())
  workSpaceId     String
  userId          String
  isWorkSpaceOwner Boolean  @default(false)
  isWorkSpaceAdmin Boolean  @default(false)
  joinedAt        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  workSpace WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workSpaceId, userId])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  workSpaceId String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  workSpace WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  userProjects UserProject[]
  tasks       Task[]
  taskProjects TaskProject[]
}

model UserProject {
  id               String   @id @default(cuid())
  projectId        String
  userId           String
  isProjectManager Boolean  @default(false)
  joinedAt         DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  projectId   String
  createdById String
  assignedToId String?
  status      String   @default("todo") // todo, in-progress, done
  priority    String   @default("medium") // low, medium, high
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  assignedTo User?    @relation("TaskAssignments", fields: [assignedToId], references: [id])
  taskProjects TaskProject[]
  userTasks   UserTask[]
  comments    Comment[]
}

model TaskProject {
  id       String @id @default(cuid())
  taskId   String
  projectId String
  createdAt DateTime @default(now())
  
  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, projectId])
}

model UserTask {
  id       String @id @default(cuid())
  taskId   String
  userId   String
  status   String @default("todo") // todo, in-progress, done
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}